@Library('shared-libs') _

pipeline {

  agent {
    node {
      label "master"
    }
  }

  stages {
    stage('Clone sync-repo1 (destination)') {
      steps {
        script {
          sshagent (credentials: ['octojenkins-rw']) {
            sh '''
              set -e
              git clone git@github.com:swethashk/sync-repo1.git
              cd sync-repo1
              git checkout -B staging origin/staging || git checkout -b staging
              cd ..
            '''
          }
        }
      }
    }

    stage('Clone sync-repo2 (source) & Copy Files') {
      steps {
        script {
          sshagent (credentials: ['jenkins_ssh']) {
            sh '''
              set -e
              git clone git@github.com:swethashk/sync-repo2.git
              cp -v sync-repo2/tenants.yaml sync-repo1/tenants.yaml
              cp -v sync-repo2/customer_accounts.yaml sync-repo1/producers.yaml
              rm -rf sync-repo2
            '''
          }
        }
      }
    }

    stage('Push to staging branch') {
      steps {
        script {
          sshagent (credentials: ['octojenkins-rw']) {
            sh '''
              set -e
              cd sync-repo1
              git config user.name "Automated Sync"
              git config user.email "you@example.com"
              if [ -n "$(git status --porcelain)" ]; then
                git add .
                git commit -m "Sync: Update tenants and producers"
                git push origin staging
              else
                echo "No changes to push."
              fi
            '''
          }
        }
      }
    }
  }

  post {
    always {
      cleanWs()
    }
  }
}
